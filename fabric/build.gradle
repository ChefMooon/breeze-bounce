plugins {
	id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
	platformSetupLoomIde()
	fabric()
}

configurations {
	common
	shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
	compileClasspath.extendsFrom common
	runtimeClasspath.extendsFrom common
	developmentFabric.extendsFrom common
}

loom {
	Project common = project(":common")
	accessWidenerPath = common.loom.accessWidenerPath

	runs {
		datagen {
			client()

			name "Minecraft Data"
			vmArg "-Dfabric-api.datagen"
			vmArg "-Dfabric-api.datagen.output-dir=${common.file("src/generated/resources")}"
			vmArg "-Dfabric-api.datagen.modid=${archives_base_name}"
			//vmArg "-Dporting_lib.datagen.existing_resources=${common.file("src/main/resources")}"

			environmentVariable("DATAGEN", "TRUE")
		}
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"

	modImplementation "net.fabricmc:fabric-loader:${project.fabric_loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}"

	common(project(path: ":common", configuration: "namedElements")) { transitive false }
	shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {

}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

shadowJar {
	exclude "architectury.common.json"

	configurations = [project.configurations.shadowCommon]
	archiveClassifier = "dev-shadow"
}

remapJar {
	injectAccessWidener = true
	input.set shadowJar.archiveFile
	dependsOn shadowJar

}

sourcesJar {
	def commonSources = project(":common").sourcesJar
	dependsOn commonSources
	from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
	withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
		skip()
	}
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}

var env = System.getenv()

var changelogFile = rootProject.file("changelog.md")
var changelogText = changelogFile.exists() ? changelogFile.text : ""
var vName = mod_name + " " + project.version

unifiedPublishing {
	project {
		displayName = vName
		version = project.version
		changelog = changelogText
		releaseType = mod_version_type
		gameVersions = minecraft_supported_versions.split(",").toList()
		gameLoaders = ["fabric","quilt"]

		mainPublication tasks.remapJar

		relations {
			depends {
				curseforge = "fabric-api"
				modrinth = "fabric-api"
			}
			includes {} // Mark as an included dependency
		}
	}

	if (env.CURSEFORGE_TOKEN) {
		curseforge {
			token = System.getenv("CURSEFORGE_TOKEN")
			id = curseforge_project_id
		}
	}

	if (env.MODRINTH_TOKEN) {
		modrinth {
			token = System.getenv("MODRINTH_TOKEN")
			id = modrinth_project_id
		}
	}
}